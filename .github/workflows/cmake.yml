name: Release Build CI

# Controls when the workflow will run
# Triggers the workflow on push or pull request events and manually from the Actions tab
on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main
  workflow_dispatch:

jobs:
  build:
    env:
      GH_TOKEN: ${{ secrets.GNUS_TOKEN_1 }}
    runs-on: ${{matrix.host}}
    container:
      image: ${{matrix.container}}
      credentials:
        username: ${{github.actor}}
        password: ${{secrets.GNUS_TOKEN_1}}
    strategy:
      fail-fast: false
      matrix:
        target: [Android, iOS, OSX, Linux, Windows]
        build-type: [Debug, Release]
        abi: [""]
        include:
          - target: Android
            host: ubuntu-22.04
            abi: arm64-v8a
            build-type: Release
          - target: Android
            host: ubuntu-22.04
            abi: armeabi-v7a
            build-type: Release
          - target: iOS
            host: macos-latest
          - target: OSX
            host: macos-latest
          - target: Linux
            host: ubuntu-22.04
            abi: x86_64
            build-type: Release
          - target: Linux
            host: ubuntu-24.04-arm
            abi: aarch64
            build-type: Release
            container: ghcr.io/geniusventures/debian-bullseye:latest
          - target: Windows
            host: windows-latest
        exclude:
          - target: Android
            abi: ""
          - target: Linux
            abi: ""
          - target: OSX
            build-type: Debug
          - target: iOS
            build-type: Debug
    steps:
      - name: Configure Linux host
        if: ${{ runner.os == 'Linux'}}
        run: |
          sudo update-alternatives --install /usr/bin/cc cc $(which clang) 100
          sudo update-alternatives --install /usr/bin/c++ c++ $(which clang++) 100
          sudo update-alternatives --set cc $(which clang)
          sudo update-alternatives --set c++ $(which clang++)

          sudo apt install ccache ninja-build -y
          echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV

      - name: Configure Windows host
        if: ${{ runner.os == 'Windows'}}
        run: |
          choco install ccache -y

      - name: Configure macOS host
        if: ${{ runner.os == 'macOS'}}
        run: |
          brew install ccache ninja bash
          PATH="$HOMEBREW_PREFIX/opt/gnu-tar/libexec/gnubin:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV

      - name: Add Android toolchain
        if: ${{ matrix.target == 'Android' }}
        run: |
          NDK_VERSION="r27b"
          wget https://dl.google.com/android/repository/android-ndk-$NDK_VERSION-linux.zip -O ndk.zip
          unzip ndk.zip -d $HOME

          echo "ANDROID_NDK_HOME=$HOME/android-ndk-$NDK_VERSION" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: zkLLVM
          submodules: "recursive"

      - name: Set build directory
        run: |
          if [ '${{matrix.abi}}' ]; then
            BUILD_DIRECTORY=${{matrix.build-type}}/${{matrix.abi}}
          else
            BUILD_DIRECTORY=${{matrix.build-type}}
          fi

          echo "SOURCE_DIRECTORY=build/${{matrix.target}}" >> $GITHUB_ENV
          echo "BUILD_DIRECTORY=$BUILD_DIRECTORY" >> $GITHUB_ENV
        shell: bash

      - name: Download thirdparty release
        working-directory: ${{github.workspace}}
        run: |
          if ${{github.event_name == 'pull_request'}}; then
              CURRENT_BRANCH=${{ github.event.pull_request.head.ref }}
          else
              CURRENT_BRANCH=$GITHUB_REF_NAME
          fi

          echo "Identified current branch as ${CURRENT_BRANCH}"

          echo "CURRENT_BRANCH=${CURRENT_BRANCH}" >>$GITHUB_ENV

          if [ "$CURRENT_BRANCH" == "main" ]; then
            thirdparty_branch="main"
          else
            thirdparty_branch="develop"
          fi

          echo "Using ${thirdparty_branch} for thirdparty"

          if [ '${{matrix.abi}}' ]; then
            FILE_NAME=${{matrix.target}}-${{matrix.abi}}-${{matrix.build-type}}.tar.gz
          else
            FILE_NAME=${{matrix.target}}-${{matrix.build-type}}.tar.gz
          fi
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV

          mkdir thirdparty
          cd thirdparty

          tag_name="${{matrix.target}}-${thirdparty_branch}-${{matrix.build-type}}"

          gh release download ${tag_name} --repo GeniusVentures/thirdparty -p "${FILE_NAME}"
          tar -zxf "${FILE_NAME}"
                    
          # Set THIRDPARTY_BUILD_DIR to the actual location where files were extracted
                    
          if [ "${{ matrix.target }}" = "Windows" ]; then
            # Convert Unix path to Windows path for Windows builds
            echo "THIRDPARTY_BUILD_DIR=$(pwd -W)/${{env.SOURCE_DIRECTORY}}/${{env.BUILD_DIRECTORY}}" >> $GITHUB_ENV
          else
            echo "THIRDPARTY_BUILD_DIR=$(pwd)/${{env.SOURCE_DIRECTORY}}/${{env.BUILD_DIRECTORY}}" >> $GITHUB_ENV
          fi

        shell: bash

      - name: Configure CMake for Android
        if: ${{ matrix.target == 'Android'}}
        working-directory: ${{github.workspace}}/zkLLVM/${{env.SOURCE_DIRECTORY}}
        run: cmake -B ${{env.BUILD_DIRECTORY}} -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DCMAKE_C_STANDARD=17 -DTHIRDPARTY_BUILD_DIR=${{env.THIRDPARTY_BUILD_DIR}} -DANDROID_ABI=${{matrix.abi}} -DCMAKE_ANDROID_NDK=${ANDROID_NDK_HOME}

      - name: Configure CMake for iOS
        if: ${{ matrix.target == 'iOS'}}
        working-directory: ${{github.workspace}}/zkLLVM/${{env.SOURCE_DIRECTORY}}
        run: cmake -B ${{env.BUILD_DIRECTORY}} -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DCMAKE_C_STANDARD=17 -DTHIRDPARTY_BUILD_DIR=${{env.THIRDPARTY_BUILD_DIR}} -DPLATFORM=OS64

      - name: Configure CMake for Mac
        if: ${{ matrix.target == 'OSX'}}
        working-directory: ${{github.workspace}}/zkLLVM/${{env.SOURCE_DIRECTORY}}
        run: cmake -B ${{env.BUILD_DIRECTORY}} -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DCMAKE_C_STANDARD=17 -DTHIRDPARTY_BUILD_DIR=${{env.THIRDPARTY_BUILD_DIR}} -DPLATFORM=MAC_UNIVERSAL

      - name: Configure CMake for Linux
        if: ${{ matrix.target == 'Linux' }}
        working-directory: ${{github.workspace}}/zkLLVM/${{env.SOURCE_DIRECTORY}}
        run: cmake -B ${{env.BUILD_DIRECTORY}} -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DCMAKE_C_STANDARD=17 -DTHIRDPARTY_BUILD_DIR=${{env.THIRDPARTY_BUILD_DIR}} -DABI_SUBFOLDER_NAME='/${{matrix.abi}}'

      - name: Configure CMake for Windows
        if: ${{ matrix.target == 'Windows' }}
        working-directory: ${{github.workspace}}\zkLLVM
        run: |
          cd ${{env.SOURCE_DIRECTORY}}
          cmake  -B ${{env.BUILD_DIRECTORY}} -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DCMAKE_C_STANDARD=17 -DTHIRDPARTY_BUILD_DIR=${{env.THIRDPARTY_BUILD_DIR}} -G "Visual Studio 17 2022" -A x64

      - name: Build
        working-directory: ${{github.workspace}}/zkLLVM/${{env.SOURCE_DIRECTORY}}
        run: cmake --build ${{env.BUILD_DIRECTORY}} --config ${{matrix.build-type}} -j

      - name: Install
        working-directory: ${{github.workspace}}/zkLLVM/${{env.SOURCE_DIRECTORY}}
        run: cmake --install ${{env.BUILD_DIRECTORY}}

      - name: Print install directory size
        working-directory: ${{github.workspace}}/zkLLVM/${{env.SOURCE_DIRECTORY}}/${{env.BUILD_DIRECTORY}}/zkLLVM
        if: runner.os != 'Windows'
        run: du -sh .
        shell: bash
      
      - name: Print install directory size (Windows)
        if: runner.os == 'Windows'
        run: |
          $path = "${{github.workspace}}\zkLLVM\${{env.SOURCE_DIRECTORY}}\${{env.BUILD_DIRECTORY}}\zkLLVM"
          $size = (Get-ChildItem -Recurse -Force $path | Measure-Object -Property Length -Sum).Sum
          "{0:N2} MB" -f ($size / 1MB)
        shell: pwsh

      - name: Compress build artifacts
        working-directory: ${{github.workspace}}/zkLLVM/${{env.SOURCE_DIRECTORY}}/${{env.BUILD_DIRECTORY}}
        if: github.ref_name == 'main' || github.ref_name == 'develop'
        shell: bash
        run: |
          tar -czvf ${FILE_NAME} \
              --exclude='zkLLVM/src' \
              --exclude='zkLLVM/tmp' \
              --transform 's|^|${{env.SOURCE_DIRECTORY}}/${{env.BUILD_DIRECTORY}}/|S' \
              zkLLVM

          mv ${FILE_NAME} "${{github.workspace}}/zkLLVM/${FILE_NAME}"

      - name: Release file
        if: github.ref_name == 'main' || github.ref_name == 'develop'
        working-directory: ${{github.workspace}}/zkLLVM
        shell: bash
        run: |
          RELEASE_TAG='${{matrix.target}}-${{github.ref_name}}-${{matrix.build-type}}'

          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV

          if ! gh release view $RELEASE_TAG; then
              echo "Release not found, creating with tag: $RELEASE_TAG"

              if [ '${{ matrix.build-type }}' != 'Release' ]; then
                  RELEASE_TYPE="--prerelease"
              else
                  RELEASE_TYPE="--latest"
              fi

              gh release create $RELEASE_TAG \
                  -n "${CURRENT_BRANCH} branch" \
                  --target "${CURRENT_BRANCH}" \
                  ${RELEASE_TYPE} \
                  -t "${{ matrix.target }} ${CURRENT_BRANCH} branch ${{ matrix.build-type }} build"
          fi

          echo -e "Uploading ${FILE_NAME}"
          gh release upload --clobber ${RELEASE_TAG} ${FILE_NAME}
